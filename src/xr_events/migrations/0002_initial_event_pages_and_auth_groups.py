# Generated by Django 2.1.7 on 2019-03-18 02:55

from django.db import migrations


def add_initial_event_pages_and_auth_groups(apps, schema_editor):
    Group = apps.get_model("auth.Group")
    Permission = apps.get_model("auth.Permission")
    ContentType = apps.get_model("contenttypes.ContentType")
    Page = apps.get_model("wagtailcore.Page")
    GroupPagePermission = apps.get_model("wagtailcore.GroupPagePermission")
    GroupCollectionPermission = apps.get_model("wagtailcore.GroupCollectionPermission")
    Collection = apps.get_model("wagtailcore.Collection")

    HomePage = apps.get_model("xr_pages.HomePage")
    EventListPage = apps.get_model("xr_events.EventListPage")
    EventGroupPage = apps.get_model("xr_events.EventGroupPage")

    # Create content types
    event_list_content_type, created = ContentType.objects.get_or_create(
        model="eventlistpage", app_label="xr_events"
    )
    event_group_content_type, created = ContentType.objects.get_or_create(
        model="eventgrouppage", app_label="xr_events"
    )

    # get homepage
    homepage = HomePage.objects.get(path="00010001")

    # get homepage last child path
    last_child_qs = Page.objects.filter(path__startswith="00010001").filter(
        path__regex=r"^\d{12}$"
    )
    last_child_path = last_child_qs.aggregate(Max("path"))["path__max"]

    # Create EventListPage
    event_list_page_path = ("00010001%4d" % (last_child_path + 1)).replace(" ", "0")
    event_list_page = EventListPage.objects.create(
        title="Veranstaltungen",
        slug="veranstaltungen",
        content_type=event_list_content_type,
        path=event_list_page_path,
        depth=3,
        numchild=1,
        url_path="/home/veranstaltungen/",
    )

    # Create EventGroupPage
    event_group_page = EventGroupPage.objects.create(
        title="XR Deutschland",
        is_regional_group=True,
        slug="xr_de",
        content_type=event_group_content_type,
        path="%s0001" % event_list_page_path,
        depth=4,
        numchild=0,
        url_path="/home/veranstaltungen/xr_de/",
    )

    # adjust homepage number of child pages
    homepage.numchild += 1
    homepage.save()

    # new groups for regional group
    moderators_group, created = Group.objects.get_or_create(
        name="Deutschland Event Moderators"
    )
    editors_group, created = Group.objects.get_or_create(
        name="Deutschland Event Editors"
    )

    # Group page permissions
    GroupPagePermission.objects.get_or_create(
        group=moderators_group, page=event_group_page, permission_type="add"
    )
    GroupPagePermission.objects.get_or_create(
        group=moderators_group, page=event_group_page, permission_type="edit"
    )
    GroupPagePermission.objects.get_or_create(
        group=moderators_group, page=event_group_page, permission_type="publish"
    )

    GroupPagePermission.objects.get_or_create(
        group=editors_group, page=event_group_page, permission_type="add"
    )
    GroupPagePermission.objects.get_or_create(
        group=editors_group, page=event_group_page, permission_type="edit"
    )

    # Collection permissions
    collection = Collection.objects.get(name="Common")

    for codename in ["add_document", "change_document", "delete_document"]:
        add_group_collection_permission(
            GroupCollectionPermission,
            moderators_group,
            collection,
            get_document_permission(ContentType, Permission, codename),
        )
    for codename in ["add_image", "change_image", "delete_image"]:
        add_group_collection_permission(
            GroupCollectionPermission,
            moderators_group,
            collection,
            get_image_permission(ContentType, Permission, codename),
        )

    add_group_collection_permission(
        GroupCollectionPermission,
        editors_group,
        collection,
        get_document_permission(ContentType, Permission, "add_document"),
    )
    add_group_collection_permission(
        GroupCollectionPermission,
        editors_group,
        collection,
        get_image_permission(ContentType, Permission, "add_image"),
    )


def get_document_permission(ContentType, Permission, permission_codename):
    document_content_type = ContentType.objects.get(
        model="document", app_label="wagtaildocs"
    )
    document_permission = Permission.objects.get(
        content_type=document_content_type, codename=permission_codename
    )
    return document_permission


def get_image_permission(ContentType, Permission, permission_codename):
    image_content_type = ContentType.objects.get(
        model="image", app_label="wagtailimages"
    )
    image_permission = Permission.objects.get(
        content_type=image_content_type, codename=permission_codename
    )
    return image_permission


def add_group_collection_permission(
    GroupCollectionPermission, group, collection, permission
):
    group_collection_permission, created = GroupCollectionPermission.objects.get_or_create(
        group=group, collection=collection, permission=permission
    )
    return group_collection_permission


class Migration(migrations.Migration):

    dependencies = [
        ("xr_events", "0001_initial"),
        ("xr_pages", "0016_rename_xr_de_page_groups"),
    ]

    operations = [
        migrations.RunPython(
            add_initial_event_pages_and_auth_groups, migrations.RunPython.noop
        )
    ]
