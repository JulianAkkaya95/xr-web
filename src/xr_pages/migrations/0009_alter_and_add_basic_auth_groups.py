# Generated by Django 2.1.7 on 2019-03-10 15:53

from django.db import migrations


def alter_and_add_basic_auth_groups(apps, schema_editor):
    Group = apps.get_model("auth.Group")
    Permission = apps.get_model("auth.Permission")
    ContentType = apps.get_model("contenttypes.ContentType")
    GroupPagePermission = apps.get_model("wagtailcore.GroupPagePermission")
    GroupCollectionPermission = apps.get_model("wagtailcore.GroupCollectionPermission")
    HomeSubPage = apps.get_model("xr_pages.HomeSubPage")
    Collection = apps.get_model("wagtailcore.Collection")

    # rename existing basic auth groups
    site_moderators = Group.objects.get(name="Moderators")
    site_moderators.name = "Overall Site Moderators"
    site_moderators.save()

    site_editors = Group.objects.get(name="Editors")
    site_editors.name = "Overall Site Editors"
    site_editors.save()

    # new groups for XR de
    xr_de_moderators, created = Group.objects.get_or_create(name="XR de Moderators")
    xr_de_editors, created = Group.objects.get_or_create(name="XR de Editors")

    # Collection permissions
    collection = Collection.objects.get(name="Common")

    for codename in ["add_document", "change_document", "delete_document"]:
        add_group_collection_permission(
            GroupCollectionPermission,
            xr_de_moderators,
            collection,
            get_document_permission(ContentType, Permission, codename),
        )
    for codename in ["add_image", "change_image", "delete_image"]:
        add_group_collection_permission(
            GroupCollectionPermission,
            xr_de_moderators,
            collection,
            get_image_permission(ContentType, Permission, codename),
        )

    add_group_collection_permission(
        GroupCollectionPermission,
        xr_de_editors,
        collection,
        get_document_permission(ContentType, Permission, "add_document"),
    )
    add_group_collection_permission(
        GroupCollectionPermission,
        xr_de_editors,
        collection,
        get_image_permission(ContentType, Permission, "add_image"),
    )

    # Group page permissions
    for page in HomeSubPage.objects.all():
        GroupPagePermission.objects.get_or_create(
            group=xr_de_moderators, page=page, permission_type="add"
        )
        GroupPagePermission.objects.get_or_create(
            group=xr_de_moderators, page=page, permission_type="edit"
        )
        GroupPagePermission.objects.get_or_create(
            group=xr_de_moderators, page=page, permission_type="publish"
        )

        GroupPagePermission.objects.get_or_create(
            group=xr_de_editors, page=page, permission_type="add"
        )
        GroupPagePermission.objects.get_or_create(
            group=xr_de_editors, page=page, permission_type="edit"
        )


def get_document_permission(ContentType, Permission, permission_codename):
    document_content_type = ContentType.objects.get(
        model="document", app_label="wagtaildocs"
    )
    document_permission = Permission.objects.get(
        content_type=document_content_type, codename=permission_codename
    )
    return document_permission


def get_image_permission(ContentType, Permission, permission_codename):
    image_content_type = ContentType.objects.get(
        model="image", app_label="wagtailimages"
    )
    image_permission = Permission.objects.get(
        content_type=image_content_type, codename=permission_codename
    )
    return image_permission


def add_group_collection_permission(
    GroupCollectionPermission, group, collection, permission
):
    group_collection_permission, created = GroupCollectionPermission.objects.get_or_create(
        group=group, collection=collection, permission=permission
    )
    return group_collection_permission


class Migration(migrations.Migration):

    dependencies = [("xr_pages", "0008_rename_standard_page_to_home_subpage")]

    operations = [
        migrations.RunPython(alter_and_add_basic_auth_groups, migrations.RunPython.noop)
    ]
