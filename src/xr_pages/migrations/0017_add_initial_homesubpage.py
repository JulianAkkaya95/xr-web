# Generated by Django 2.1.7 on 2019-03-18 11:42

from django.db import migrations
from django.db.models import Max


def add_initial_homesubpage_if_there_is_none(apps, schema_editor):
    Group = apps.get_model("auth.Group")
    ContentType = apps.get_model("contenttypes.ContentType")
    Page = apps.get_model("wagtailcore.Page")
    GroupPagePermission = apps.get_model("wagtailcore.GroupPagePermission")
    HomePage = apps.get_model("xr_pages.HomePage")
    HomeSubPage = apps.get_model("xr_pages.HomeSubPage")

    if HomeSubPage.objects.all().exists():
        return

    # Create HomeSubPage content type
    home_sub_page_content_type, created = ContentType.objects.get_or_create(
        model="homesubpage", app_label="xr_pages"
    )

    # get homepage
    homepage = HomePage.objects.get(path="00010001")

    # get homepage last child path
    last_child_qs = Page.objects.filter(path__startswith="00010001").filter(
        path__regex=r"^\d{12}$"
    )
    last_child_path = last_child_qs.aggregate(Max("path"))["path__max"]

    # Create HomeSubPage
    home_sub_page_path = ("%12d" % (int(last_child_path) + 1)).replace(" ", "0")
    home_sub_page = HomeSubPage.objects.create(
        title="Impressum",
        slug="impressum",
        content_type=home_sub_page_content_type,
        path=home_sub_page_path,
        depth=3,
        numchild=0,
        url_path="/home/impressum/",
    )

    # adjust homepage number of child pages
    homepage.numchild += 1
    homepage.save()

    # add GroupPagePermissions
    regional_moderators_group = Group.objects.get(
        name="%s Page Moderators" % homepage.group_name
    )
    regional_editors_group = Group.objects.get(
        name="%s Page Editors" % homepage.group_name
    )

    # Moderators
    for permission_type in ["add", "edit", "publish"]:
        group_page_permission, created = GroupPagePermission.objects.get_or_create(
            group=regional_moderators_group,
            page=home_sub_page,
            permission_type=permission_type,
        )

    # Editors
    for permission_type in ["add", "edit"]:
        group_page_permission, created = GroupPagePermission.objects.get_or_create(
            group=regional_editors_group,
            page=home_sub_page,
            permission_type=permission_type,
        )


class Migration(migrations.Migration):

    dependencies = [("xr_pages", "0016_rename_xr_de_page_groups")]

    operations = [
        migrations.RunPython(
            add_initial_homesubpage_if_there_is_none, migrations.RunPython.noop
        )
    ]
