# Generated by Django 2.1.7 on 2019-04-07 08:23

from django.db import migrations


def adjust_group_permissions(apps, schema_editor):
    Group = apps.get_model("auth.Group")
    Permission = apps.get_model("auth.Permission")
    ContentType = apps.get_model("contenttypes.ContentType")
    GroupCollectionPermission = apps.get_model("wagtailcore.GroupCollectionPermission")
    Collection = apps.get_model("wagtailcore.Collection")
    GroupPagePermission = apps.get_model("wagtailcore.GroupPagePermission")
    HomePage = apps.get_model("xr_pages.HomePage")

    overall_moderators = Group.objects.get(name="Overall Site Moderators")
    overall_editors = Group.objects.get(name="Overall Site Editors")

    regional_moderators = Group.objects.get(name="Deutschland Page Moderators")
    regional_editors = Group.objects.get(name="Deutschland Page Editors")

    # User Model
    user_content_type, created = ContentType.objects.get_or_create(
        model="user", app_label="auth"
    )
    add_user_permission, created = Permission.objects.get_or_create(
        content_type=user_content_type, codename="add_user"
    )
    change_user_permission, created = Permission.objects.get_or_create(
        content_type=user_content_type, codename="change_user"
    )
    delete_user_permission, created = Permission.objects.get_or_create(
        content_type=user_content_type, codename="delete_user"
    )

    overall_moderators.permissions.remove(add_user_permission)
    overall_moderators.permissions.remove(change_user_permission)
    overall_moderators.permissions.remove(delete_user_permission)
    overall_editors.permissions.remove(add_user_permission)

    # Main Menu
    mainmenu_content_type, created = ContentType.objects.get_or_create(
        model="mainmenu", app_label="wagtailmenus"
    )
    add_mainmenu_permission, created = Permission.objects.get_or_create(
        content_type=mainmenu_content_type, codename="add_mainmenu"
    )
    change_mainmenu_permission, created = Permission.objects.get_or_create(
        content_type=mainmenu_content_type, codename="change_mainmenu"
    )
    delete_mainmenu_permission, created = Permission.objects.get_or_create(
        content_type=mainmenu_content_type, codename="delete_mainmenu"
    )

    overall_moderators.permissions.add(add_mainmenu_permission)
    overall_moderators.permissions.add(change_mainmenu_permission)
    overall_moderators.permissions.add(delete_mainmenu_permission)
    overall_editors.permissions.remove(add_mainmenu_permission)

    regional_moderators.permissions.add(add_mainmenu_permission)
    regional_moderators.permissions.add(change_mainmenu_permission)
    regional_moderators.permissions.add(delete_mainmenu_permission)
    regional_editors.permissions.remove(add_mainmenu_permission)

    # Flat Menu
    flatmenu_content_type, created = ContentType.objects.get_or_create(
        model="flatmenu", app_label="wagtailmenus"
    )
    add_flatmenu_permission, created = Permission.objects.get_or_create(
        content_type=flatmenu_content_type, codename="add_flatmenu"
    )
    change_flatmenu_permission, created = Permission.objects.get_or_create(
        content_type=flatmenu_content_type, codename="change_flatmenu"
    )
    delete_flatmenu_permission, created = Permission.objects.get_or_create(
        content_type=flatmenu_content_type, codename="delete_flatmenu"
    )

    overall_moderators.permissions.add(add_flatmenu_permission)
    overall_moderators.permissions.add(change_flatmenu_permission)
    overall_moderators.permissions.add(delete_flatmenu_permission)
    overall_editors.permissions.remove(add_flatmenu_permission)

    regional_moderators.permissions.add(add_flatmenu_permission)
    regional_moderators.permissions.add(change_flatmenu_permission)
    regional_moderators.permissions.add(delete_flatmenu_permission)
    regional_editors.permissions.remove(add_flatmenu_permission)

    # LocalGroup Model
    localgroup_content_type, created = ContentType.objects.get_or_create(
        model="localgroup", app_label="xr_pages"
    )
    add_localgroup_permission, created = Permission.objects.get_or_create(
        content_type=localgroup_content_type, codename="add_localgroup"
    )
    change_localgroup_permission, created = Permission.objects.get_or_create(
        content_type=localgroup_content_type, codename="change_localgroup"
    )
    delete_localgroup_permission, created = Permission.objects.get_or_create(
        content_type=localgroup_content_type, codename="delete_localgroup"
    )

    overall_moderators.permissions.add(add_localgroup_permission)
    overall_moderators.permissions.add(change_localgroup_permission)
    overall_moderators.permissions.add(delete_localgroup_permission)
    overall_editors.permissions.remove(add_localgroup_permission)

    # Collection Model
    collection_content_type, created = ContentType.objects.get_or_create(
        model="collection", app_label="wagtailcore"
    )
    add_collection_permission, created = Permission.objects.get_or_create(
        content_type=collection_content_type, codename="add_collection"
    )
    change_collection_permission, created = Permission.objects.get_or_create(
        content_type=collection_content_type, codename="change_collection"
    )
    delete_collection_permission, created = Permission.objects.get_or_create(
        content_type=collection_content_type, codename="delete_collection"
    )

    overall_moderators.permissions.add(add_collection_permission)
    overall_moderators.permissions.add(change_collection_permission)
    overall_moderators.permissions.add(delete_collection_permission)
    overall_editors.permissions.remove(add_collection_permission)

    # Redirect Model
    redirect_content_type, created = ContentType.objects.get_or_create(
        model="redirect", app_label="wagtailredirects"
    )
    add_redirect_permission, created = Permission.objects.get_or_create(
        content_type=redirect_content_type, codename="add_redirect"
    )
    change_redirect_permission, created = Permission.objects.get_or_create(
        content_type=redirect_content_type, codename="change_redirect"
    )
    delete_redirect_permission, created = Permission.objects.get_or_create(
        content_type=redirect_content_type, codename="delete_redirect"
    )

    overall_moderators.permissions.add(add_redirect_permission)
    overall_moderators.permissions.add(change_redirect_permission)
    overall_moderators.permissions.add(delete_redirect_permission)
    overall_editors.permissions.remove(add_redirect_permission)

    regional_moderators.permissions.add(add_redirect_permission)
    regional_moderators.permissions.add(change_redirect_permission)
    regional_moderators.permissions.add(delete_redirect_permission)
    regional_editors.permissions.remove(add_redirect_permission)

    # Collection permissions
    image_content_type = ContentType.objects.get(
        model="image", app_label="wagtailimages"
    )
    add_image_permission = Permission.objects.get(
        content_type=image_content_type, codename="add_image"
    )
    change_image_permission = Permission.objects.get(
        content_type=image_content_type, codename="change_image"
    )

    document_content_type = ContentType.objects.get(
        model="document", app_label="wagtaildocs"
    )
    add_document_permission = Permission.objects.get(
        content_type=document_content_type, codename="add_document"
    )
    change_document_permission = Permission.objects.get(
        content_type=document_content_type, codename="change_document"
    )
    common_collection = Collection.objects.get(name="Common")
    root_collection = Collection.objects.get(name="Root")

    # make sure all groups can access common collection
    for group in Group.objects.all():
        GroupCollectionPermission.objects.get_or_create(
            group=group, collection=common_collection, permission=add_image_permission
        )
        GroupCollectionPermission.objects.get_or_create(
            group=group,
            collection=common_collection,
            permission=change_image_permission,
        )
        GroupCollectionPermission.objects.get_or_create(
            group=group,
            collection=common_collection,
            permission=add_document_permission,
        )
        GroupCollectionPermission.objects.get_or_create(
            group=group,
            collection=common_collection,
            permission=change_document_permission,
        )

    # remove root collection for overall site groups
    for group in [overall_moderators, overall_editors]:
        GroupCollectionPermission.objects.get_or_create(
            group=group, collection=root_collection, permission=add_image_permission
        )[0].delete()
        GroupCollectionPermission.objects.get_or_create(
            group=group, collection=root_collection, permission=change_image_permission
        )[0].delete()
        GroupCollectionPermission.objects.get_or_create(
            group=group, collection=root_collection, permission=add_document_permission
        )[0].delete()
        GroupCollectionPermission.objects.get_or_create(
            group=group,
            collection=root_collection,
            permission=change_document_permission,
        )[0].delete()

    # alter overall site group's root page permission

    # remove root page permissions
    GroupPagePermission.objects.filter(group=overall_moderators).delete()
    GroupPagePermission.objects.filter(group=overall_editors).delete()

    # add homepage permissions
    homepage = HomePage.objects.get(path="00010001")

    # Moderators
    for permission_type in ["add", "edit", "publish"]:
        group_page_permission, created = GroupPagePermission.objects.get_or_create(
            group=overall_moderators, page=homepage, permission_type=permission_type
        )

    # Editors
    for permission_type in ["add", "edit"]:
        group_page_permission, created = GroupPagePermission.objects.get_or_create(
            group=overall_editors, page=homepage, permission_type=permission_type
        )


class Migration(migrations.Migration):

    dependencies = [
        ("xr_pages", "0031_data_add_further_permissions_to_overall_site_auth_groups")
    ]

    operations = [
        migrations.RunPython(adjust_group_permissions, migrations.RunPython.noop)
    ]
